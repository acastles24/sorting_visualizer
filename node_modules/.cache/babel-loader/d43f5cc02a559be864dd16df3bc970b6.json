{"ast":null,"code":"import { highlightBar, resetBarColor, animationScaledTimeout } from './utilities';\n/**\n * Merge sort class.\n */\n\nexport class mergeSort {\n  /**\n   * \n   * @param {int} sortingSpeed - sorting speed (delay) in ms.\n   */\n  constructor(sortingSpeed) {\n    this.sortingSpeed = sortingSpeed;\n  }\n  /**\n   * Main method for sort class.\n   * @param {array} array - array to sort\n   */\n\n\n  sortStart(array) {\n    return new Promise(async resolve => {\n      let step = 1;\n\n      while (step < array.length) {\n        let left = 0;\n\n        while (left + step < array.length) {\n          await this.merge(array, left, step);\n          left += step * 2;\n        }\n\n        step *= 2;\n      }\n\n      await animationScaledTimeout();\n      resolve();\n    });\n  }\n  /**\n   * Merges (sorts) portion of array using left bound and step amount for right bound.\n   * @param {*} array \n   * @param {*} left \n   * @param {*} step \n   */\n\n\n  merge(array, left, step) {\n    return new Promise(async resolve => {\n      let right = left + step;\n      let end = Math.min(left + step * 2 - 1, array.length - 1);\n      let leftMoving = left;\n      let rightMoving = right;\n      let temp = [];\n\n      for (let i = left; i <= end; i++) {\n        if ((array[leftMoving] <= array[rightMoving] || rightMoving > end) && leftMoving < right) {\n          temp[i] = array[leftMoving];\n          leftMoving++;\n        } else {\n          temp[i] = array[rightMoving];\n          rightMoving++;\n        }\n      }\n\n      for (let j = left; j <= end; j++) {\n        array[j] = temp[j];\n        await highlightBar(j, temp[j], this.sortingSpeed);\n        await resetBarColor(j, this.sortingSpeed);\n      }\n\n      resolve();\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/acastles/Documents/Projects/sorting_visualizer/src/SortingAlgorithms/mergeSort.jsx"],"names":["highlightBar","resetBarColor","animationScaledTimeout","mergeSort","constructor","sortingSpeed","sortStart","array","Promise","resolve","step","length","left","merge","right","end","Math","min","leftMoving","rightMoving","temp","i","j"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,EAAqCC,sBAArC,QAAkE,aAAlE;AAEA;;;;AAGA,OAAO,MAAMC,SAAN,CAAe;AACpB;;;;AAIAC,EAAAA,WAAW,CAACC,YAAD,EAAc;AACvB,SAAKA,YAAL,GAAoBA,YAApB;AACD;AAED;;;;;;AAIAC,EAAAA,SAAS,CAACC,KAAD,EAAO;AACd,WAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACtC,UAAIC,IAAI,GAAG,CAAX;;AACA,aAAOA,IAAI,GAAGH,KAAK,CAACI,MAApB,EAA4B;AAC1B,YAAIC,IAAI,GAAG,CAAX;;AACA,eAAOA,IAAI,GAAGF,IAAP,GAAcH,KAAK,CAACI,MAA3B,EAAmC;AACjC,gBAAM,KAAKE,KAAL,CAAWN,KAAX,EAAkBK,IAAlB,EAAwBF,IAAxB,CAAN;AACAE,UAAAA,IAAI,IAAIF,IAAI,GAAG,CAAf;AACD;;AACDA,QAAAA,IAAI,IAAI,CAAR;AACH;;AACD,YAAMR,sBAAsB,EAA5B;AACAO,MAAAA,OAAO;AACN,KAZQ,CAAP;AAaH;AAED;;;;;;;;AAMAI,EAAAA,KAAK,CAACN,KAAD,EAAQK,IAAR,EAAcF,IAAd,EAAoB;AACvB,WAAO,IAAIF,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAIK,KAAK,GAAGF,IAAI,GAAGF,IAAnB;AACA,UAAIK,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAGF,IAAI,GAAG,CAAd,GAAkB,CAA3B,EAA8BH,KAAK,CAACI,MAAN,GAAe,CAA7C,CAAV;AACA,UAAIO,UAAU,GAAGN,IAAjB;AACA,UAAIO,WAAW,GAAGL,KAAlB;AACA,UAAIM,IAAI,GAAG,EAAX;;AAEA,WAAK,IAAIC,CAAC,GAAGT,IAAb,EAAmBS,CAAC,IAAIN,GAAxB,EAA6BM,CAAC,EAA9B,EAAkC;AAChC,YAAI,CAACd,KAAK,CAACW,UAAD,CAAL,IAAqBX,KAAK,CAACY,WAAD,CAA1B,IAA2CA,WAAW,GAAGJ,GAA1D,KACAG,UAAU,GAAGJ,KADjB,EACwB;AACtBM,UAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUd,KAAK,CAACW,UAAD,CAAf;AACAA,UAAAA,UAAU;AACX,SAJD,MAIO;AACLE,UAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUd,KAAK,CAACY,WAAD,CAAf;AACAA,UAAAA,WAAW;AACZ;AACF;;AACD,WAAK,IAAIG,CAAC,GAAGV,IAAb,EAAmBU,CAAC,IAAIP,GAAxB,EAA6BO,CAAC,EAA9B,EAAkC;AAChCf,QAAAA,KAAK,CAACe,CAAD,CAAL,GAAWF,IAAI,CAACE,CAAD,CAAf;AACA,cAAMtB,YAAY,CAACsB,CAAD,EAAIF,IAAI,CAACE,CAAD,CAAR,EAAa,KAAKjB,YAAlB,CAAlB;AACA,cAAMJ,aAAa,CAACqB,CAAD,EAAI,KAAKjB,YAAT,CAAnB;AACD;;AACDI,MAAAA,OAAO;AACR,KAvBM,CAAP;AAwBD;;AA5DqB","sourcesContent":["import {highlightBar, resetBarColor, animationScaledTimeout} from './utilities'\n\n/**\n * Merge sort class.\n */\nexport class mergeSort{\n  /**\n   * \n   * @param {int} sortingSpeed - sorting speed (delay) in ms.\n   */\n  constructor(sortingSpeed){\n    this.sortingSpeed = sortingSpeed\n  }\n\n  /**\n   * Main method for sort class.\n   * @param {array} array - array to sort\n   */\n  sortStart(array){  \n    return new Promise(async (resolve) => {\n    let step = 1;\n    while (step < array.length) {\n      let left = 0;\n      while (left + step < array.length) {\n        await this.merge(array, left, step);\n        left += step * 2;\n      }\n      step *= 2;\n  }\n  await animationScaledTimeout()\n  resolve()\n  })\n}\n\n/**\n * Merges (sorts) portion of array using left bound and step amount for right bound.\n * @param {*} array \n * @param {*} left \n * @param {*} step \n */\nmerge(array, left, step) {\n  return new Promise(async (resolve) => {\n    let right = left + step;\n    let end = Math.min(left + step * 2 - 1, array.length - 1);\n    let leftMoving = left;\n    let rightMoving = right;\n    let temp = [];\n\n    for (let i = left; i <= end; i++) {\n      if ((array[leftMoving] <= array[rightMoving] || rightMoving > end) &&\n          leftMoving < right) {\n        temp[i] = array[leftMoving];\n        leftMoving++;\n      } else {\n        temp[i] = array[rightMoving];\n        rightMoving++;\n      }\n    }\n    for (let j = left; j <= end; j++) {\n      array[j] = temp[j];\n      await highlightBar(j, temp[j], this.sortingSpeed)\n      await resetBarColor(j, this.sortingSpeed)\n    }\n    resolve()\n  })\n}\n}"]},"metadata":{},"sourceType":"module"}