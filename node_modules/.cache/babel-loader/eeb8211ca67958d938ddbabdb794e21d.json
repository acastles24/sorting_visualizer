{"ast":null,"code":"/**\n * Highlights and changes height of bar corresponding to array element being changed.\n * @param {int} index - index in array of element being changed\n * @param {int} value - new value of array element\n * @param {int} speed - speed (delay) of operation in ms\n */\nexport function highlightBar(index, value, speed) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const arrayBars = document.getElementsByClassName('array-element');\n      const barStyle = arrayBars[index].style;\n      barStyle.backgroundColor = 'red';\n      barStyle.height = `${value}%`;\n      resolve();\n    }, speed);\n  });\n}\n/**\n * Resets bar color to black.\n * @param {int} index - index in array of element being changed\n * @param {int} speed - speed (delay) of operation in ms\n */\n\nexport function resetBarColor(index, speed) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const arrayBars = document.getElementsByClassName('array-element');\n      const barStyle = arrayBars[index].style;\n      barStyle.backgroundColor = 'black';\n      resolve();\n    }, speed);\n  });\n}\n/**\n * Changes class of HTML elements to sorted type which starts 2 sec color change animation.\n */\n\nexport function animationScaledTimeout() {\n  return new Promise(resolve => {\n    let elements = document.getElementsByClassName(\"array-element\");\n\n    for (var i = elements.length - 1; i >= 0; --i) {\n      elements[i].className = \"array-element array-element-sorted\";\n    }\n\n    setTimeout(() => {\n      resolve();\n    }, 2000);\n  });\n}\n/**\n * Highlights and resets two elements that are being swapped during sorting.\n * @param {array} array - current array during sorting\n * @param {int} i - first index being swapped\n * @param {int} j - second index being swapped\n * @param {int} sortingSpeed - speed (delay) of operation in ms\n */\n\nexport function highlightSwappedElements(array, i, j, sortingSpeed) {\n  return new Promise(async resolve => {\n    const temp = array[i];\n    await highlightBar(i, array[j], sortingSpeed);\n    await resetBarColor(i, sortingSpeed);\n    await highlightBar(j, temp, sortingSpeed);\n    await resetBarColor(j, sortingSpeed);\n    resolve();\n  });\n}\n/**\n * Swaps two elements in array\n * @param {array} array - current element being sorted\n * @param {int} i  - first element being swapped\n * @param {int} j - second element being swapped\n */\n\nexport function swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n/**\n * Resets existing elements to original class name.\n * render does not change class of visible elements back to array-element.\n */\n\nexport function resetExistingElements() {\n  let elements = document.getElementsByClassName(\"array-element array-element-sorted\");\n\n  for (var i = elements.length - 1; i >= 0; --i) {\n    elements[i].className = \"array-element\";\n  }\n}\n/**\n * Changes buttons to active with 'Y' or inactive with 'N'.\n * @param {str} yesOrNo \n */\n\nexport function areButtonsActive(yesOrNo) {\n  let bool_ = false;\n\n  if (yesOrNo === 'N') {\n    bool_ = true;\n    document.getElementById(\"sliderLabel\").style.color = \"grey\";\n  } else {\n    document.getElementById(\"sliderLabel\").style.color = \"black\";\n  }\n\n  let buttons = document.getElementsByTagName(\"button\");\n\n  for (var i = 0; i <= buttons.length - 1; ++i) {\n    buttons[i].disabled = bool_;\n    buttons[i].style.backgroundColor = 'rgb(0, 255, 157)';\n  }\n\n  document.getElementById(\"arrayLengthSlider\").disabled = bool_;\n}\n/**\n * Calculates sorting speed (delay) by dividing current array length from slider.\n * Speed inversely proportional to length in ms.\n */\n\nexport function getSortingSpeed() {\n  return 100 / document.getElementById(\"arrayLengthSlider\").value;\n}","map":{"version":3,"sources":["/Users/acastles/Documents/Projects/sorting_visualizer/src/SortingAlgorithms/utilities.jsx"],"names":["highlightBar","index","value","speed","Promise","resolve","setTimeout","arrayBars","document","getElementsByClassName","barStyle","style","backgroundColor","height","resetBarColor","animationScaledTimeout","elements","i","length","className","highlightSwappedElements","array","j","sortingSpeed","temp","swap","resetExistingElements","areButtonsActive","yesOrNo","bool_","getElementById","color","buttons","getElementsByTagName","disabled","getSortingSpeed"],"mappings":"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","sourcesContent":["/**\n * Highlights and changes height of bar corresponding to array element being changed.\n * @param {int} index - index in array of element being changed\n * @param {int} value - new value of array element\n * @param {int} speed - speed (delay) of operation in ms\n */\nexport function highlightBar(index, value, speed){\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-element');\n        const barStyle = arrayBars[index].style\n        barStyle.backgroundColor = 'red';\n        barStyle.height = `${value}%`;\n        resolve()\n      }, speed)\n    })\n}\n\n/**\n * Resets bar color to black.\n * @param {int} index - index in array of element being changed\n * @param {int} speed - speed (delay) of operation in ms\n */\nexport function resetBarColor(index, speed){\n    return new Promise((resolve) => {\n        setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-element');\n        const barStyle = arrayBars[index].style\n        barStyle.backgroundColor = 'black';\n        resolve()\n    }, speed)\n    })\n}\n\n/**\n * Changes class of HTML elements to sorted type which starts 2 sec color change animation.\n */\nexport function animationScaledTimeout(){\n    return new Promise((resolve) => {\n        let elements = document.getElementsByClassName(\"array-element\")\n            for (var i = elements.length - 1; i >= 0; --i) {\n                elements[i].className = \"array-element array-element-sorted\"\n            }\n        setTimeout(() => {\n        resolve()\n        }, 2000)\n    })\n}\n\n\n/**\n * Highlights and resets two elements that are being swapped during sorting.\n * @param {array} array - current array during sorting\n * @param {int} i - first index being swapped\n * @param {int} j - second index being swapped\n * @param {int} sortingSpeed - speed (delay) of operation in ms\n */\nexport function highlightSwappedElements(array, i, j, sortingSpeed){\n  return new Promise(async(resolve) => {\n  const temp = array[i];\n  \n  await highlightBar(i, array[j], sortingSpeed)\n  await resetBarColor(i, sortingSpeed)\n\n  await highlightBar(j, temp, sortingSpeed)\n  await resetBarColor(j, sortingSpeed)\n\n  resolve()\n})\n}\n\n/**\n * Swaps two elements in array\n * @param {array} array - current element being sorted\n * @param {int} i  - first element being swapped\n * @param {int} j - second element being swapped\n */\nexport function swap(array, i, j){\n      const temp = array[i];\n\n      array[i] = array[j];\n      array[j] = temp\n}\n\n /**\n  * Resets existing elements to original class name.\n  * render does not change class of visible elements back to array-element.\n  */\nexport function resetExistingElements(){\n    let elements = document.getElementsByClassName(\"array-element array-element-sorted\")\n      for (var i = elements.length - 1; i >= 0; --i) {\n        elements[i].className = \"array-element\"\n      }\n}\n\n/**\n * Changes buttons to active with 'Y' or inactive with 'N'.\n * @param {str} yesOrNo \n */\nexport function areButtonsActive(yesOrNo){\n    let bool_ = false\n    if (yesOrNo === 'N'){\n        bool_ = true\n        document.getElementById(\"sliderLabel\").style.color = \"grey\"\n    }\n    else{\n      document.getElementById(\"sliderLabel\").style.color = \"black\"\n    }\n    let buttons = document.getElementsByTagName(\"button\");\n        for (var i = 0; i <= buttons.length - 1; ++i) {\n            buttons[i].disabled = bool_\n            buttons[i].style.backgroundColor = 'rgb(0, 255, 157)'\n          }\n    document.getElementById(\"arrayLengthSlider\").disabled = bool_\n}\n\n/**\n * Calculates sorting speed (delay) by dividing current array length from slider.\n * Speed inversely proportional to length in ms.\n */\nexport function getSortingSpeed(){\n    return 100/document.getElementById(\"arrayLengthSlider\").value\n}"]},"metadata":{},"sourceType":"module"}