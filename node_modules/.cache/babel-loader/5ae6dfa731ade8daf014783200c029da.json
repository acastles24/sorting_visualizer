{"ast":null,"code":"import _regeneratorRuntime from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import MetaTags from'react-meta-tags';import'./SortingVisualizer.css';import{mergeSort}from'../SortingAlgorithms/mergeSort';import{quickSort}from'../SortingAlgorithms/quickSort';import{bubbleSort}from'../SortingAlgorithms/bubbleSort';import{insertionSort}from'../SortingAlgorithms/insertionSort';import{resetExistingElements,areButtonsActive,getSortingSpeed}from'../SortingAlgorithms/utilities';import{getRandomInt}from'../SortingVisualizer/utilities';var BUTTON_SELECT_COLOR='rgb(15, 175, 224)';var SortingVisualizer=/*#__PURE__*/function(_Component){_inherits(SortingVisualizer,_Component);function SortingVisualizer(){var _this;_classCallCheck(this,SortingVisualizer);_this=_possibleConstructorReturn(this,_getPrototypeOf(SortingVisualizer).call(this));_this.state={array:[]};return _this;}_createClass(SortingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){this.resetArray(100);}},{key:\"insertionSortButton\",value:function insertionSortButton(array){this.sort(insertionSort,array);}},{key:\"bubbleSortButton\",value:function bubbleSortButton(array){this.sort(bubbleSort,array);}},{key:\"quickSortButton\",value:function quickSortButton(array){this.sort(quickSort,array);}},{key:\"mergeSortButton\",value:function mergeSortButton(array){this.sort(mergeSort,array);}/**\n     * Sorts array using chosen method. Creates copy of array to avoid re-rendering.\n     * @param {class} method - class of clicked sorting method\n     * @param {*} array - current array to be sorted\n     */},{key:\"sort\",value:function(){var _sort=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(sortingMethod,array){var arrayCopy,sortingSpeed,sortMethodInit;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:resetExistingElements();areButtonsActive('N');arrayCopy=array.slice();sortingSpeed=getSortingSpeed();sortMethodInit=new sortingMethod(sortingSpeed);_context.next=7;return sortMethodInit.sortStart(arrayCopy);case 7:this.setState({array:arrayCopy});areButtonsActive('Y');case 9:case\"end\":return _context.stop();}}},_callee,this);}));function sort(_x,_x2){return _sort.apply(this,arguments);}return sort;}()/**\n     * Creates random array of given length and sets state.\n     * @param {int} len_ - length of random array\n     */},{key:\"resetArray\",value:function resetArray(len_){resetExistingElements();var array=[];for(var i=0;i<len_;i++){array.push(getRandomInt(5,100));}this.setState({array:array});}},{key:\"render\",value:function render(){var _this2=this;var array=this.state.array;var width=(90-0.2-array.length*0.2)/array.length;return React.createElement(\"div\",null,React.createElement(MetaTags,null,React.createElement(\"meta\",{name:\"viewport\",content:\"width=device-width, initial-scale=1.0\"})),React.createElement(\"div\",{id:\"arrayContainer\",className:\"array-container\"},React.createElement(\"div\",{className:\"array-wrapper\"},array.map(function(value,idX){return React.createElement(\"div\",{className:\"array-element\",key:idX,style:{width:\"\".concat(width,\"%\"),height:\"\".concat(value,\"%\")}});}))),React.createElement(\"div\",{className:\"button-bar\"},React.createElement(\"div\",{className:\"button-container\"},React.createElement(\"button\",{id:\"mergeSortButton\",className:\"sorting-button\",onClick:function onClick(){_this2.mergeSortButton(_this2.state.array);document.getElementById('mergeSortButton').style.backgroundColor=BUTTON_SELECT_COLOR;}},\"Merge Sort\")),React.createElement(\"div\",{className:\"button-container\"},React.createElement(\"button\",{id:\"quickSortButton\",className:\"sorting-button\",onClick:function onClick(){_this2.quickSortButton(_this2.state.array);document.getElementById('quickSortButton').style.backgroundColor=BUTTON_SELECT_COLOR;}},\"Quick Sort\")),React.createElement(\"div\",{className:\"button-container\"},React.createElement(\"button\",{id:\"bubbleSortButton\",className:\"sorting-button\",onClick:function onClick(){_this2.bubbleSortButton(_this2.state.array);document.getElementById('bubbleSortButton').style.backgroundColor=BUTTON_SELECT_COLOR;}},\"Bubble Sort\")),React.createElement(\"div\",{className:\"button-container\"},React.createElement(\"button\",{id:\"insertionSortButton\",className:\"sorting-button\",onClick:function onClick(){_this2.insertionSortButton(_this2.state.array);document.getElementById('insertionSortButton').style.backgroundColor=BUTTON_SELECT_COLOR;}},\"Insertion Sort\")),React.createElement(\"div\",{className:\"button-container\"},React.createElement(\"button\",{id:\"randomButton\",className:\"sorting-button\",onClick:function onClick(){return _this2.resetArray(_this2.state.array.length);}},\"Generate Random Array\")),React.createElement(\"div\",{className:\"button-container\"},React.createElement(\"div\",{id:\"sliderLabel\",className:\"slider-label\"},\"Array Size\"),React.createElement(\"input\",{className:\"slider\",type:\"range\",name:\"length\",id:\"arrayLengthSlider\",min:\"10\",max:\"200\",step:\"5\",defaultValue:100,onInput:function onInput(){return _this2.resetArray(document.getElementById(\"arrayLengthSlider\").value);}}))),React.createElement(\"div\",{className:\"bottom-rectangle\"}));}}]);return SortingVisualizer;}(Component);export{SortingVisualizer as default};","map":{"version":3,"sources":["/Users/acastles/Documents/Projects/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","Component","MetaTags","mergeSort","quickSort","bubbleSort","insertionSort","resetExistingElements","areButtonsActive","getSortingSpeed","getRandomInt","BUTTON_SELECT_COLOR","SortingVisualizer","state","array","resetArray","sort","sortingMethod","arrayCopy","slice","sortingSpeed","sortMethodInit","sortStart","setState","len_","i","push","width","length","map","value","idX","height","mergeSortButton","document","getElementById","style","backgroundColor","quickSortButton","bubbleSortButton","insertionSortButton"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport MetaTags from 'react-meta-tags'\nimport './SortingVisualizer.css'\nimport {mergeSort} from '../SortingAlgorithms/mergeSort'\nimport {quickSort} from '../SortingAlgorithms/quickSort'\nimport {bubbleSort} from '../SortingAlgorithms/bubbleSort'\nimport {insertionSort} from '../SortingAlgorithms/insertionSort'\nimport {resetExistingElements, areButtonsActive, getSortingSpeed} from '../SortingAlgorithms/utilities'\nimport {getRandomInt} from '../SortingVisualizer/utilities'\n\nconst BUTTON_SELECT_COLOR = 'rgb(15, 175, 224)'\n\nexport default class SortingVisualizer extends Component{\n    constructor(){\n        super();\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray(100)\n    }\n\n    insertionSortButton(array){\n        this.sort(insertionSort, array)\n    }\n\n    bubbleSortButton(array){\n        this.sort(bubbleSort, array)\n    }\n\n    quickSortButton(array){\n        this.sort(quickSort, array)\n    }\n\n    mergeSortButton(array){\n        this.sort(mergeSort, array)\n    }\n    \n    /**\n     * Sorts array using chosen method. Creates copy of array to avoid re-rendering.\n     * @param {class} method - class of clicked sorting method\n     * @param {*} array - current array to be sorted\n     */\n    async sort(sortingMethod, array){\n        resetExistingElements()\n        areButtonsActive('N')\n    \n        let arrayCopy = array.slice()\n        const sortingSpeed = getSortingSpeed()\n        \n        let sortMethodInit = new sortingMethod(sortingSpeed)\n        await sortMethodInit.sortStart(arrayCopy)\n        this.setState({array: arrayCopy})\n        areButtonsActive('Y')\n    }\n\n    /**\n     * Creates random array of given length and sets state.\n     * @param {int} len_ - length of random array\n     */\n    resetArray(len_){\n        resetExistingElements()\n        const array = []\n        for (let i = 0; i < len_; i ++){\n            array.push(getRandomInt(5, 100))\n        }\n        this.setState({array})\n    }\n    render(){\n        const {array} = this.state;\n        const width = ((90 - 0.2 - (array.length*0.2))/(array.length));\n        return(\n            <div>\n                <MetaTags>\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>\n                </MetaTags>\n                <div id = 'arrayContainer' className = 'array-container'>\n                    <div className = 'array-wrapper'>\n                        {array.map((value, idX) => (\n                        <div className = 'array-element'  key = {idX} style = {{width: `${width}%`, height: `${value}%`}}></div>\n                        ))}\n                    </div>\n                </div>\n                <div className = 'button-bar'>\n                    <div className = 'button-container'>\n                        <button id='mergeSortButton' className = 'sorting-button' onClick={() => {this.mergeSortButton(this.state.array); document.getElementById('mergeSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Merge Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='quickSortButton' className = 'sorting-button' onClick={() => {this.quickSortButton(this.state.array); document.getElementById('quickSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Quick Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='bubbleSortButton' className = 'sorting-button' onClick={() => {this.bubbleSortButton(this.state.array); document.getElementById('bubbleSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Bubble Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='insertionSortButton' className = 'sorting-button' onClick={() => {this.insertionSortButton(this.state.array); document.getElementById('insertionSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Insertion Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='randomButton' className = 'sorting-button' onClick={() => this.resetArray(this.state.array.length)}>Generate Random Array</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <div id = 'sliderLabel' className = 'slider-label'>Array Size</div>\n                        <input className = 'slider' type = \"range\" name = \"length\" id = \"arrayLengthSlider\" min = \"10\" max = \"200\" step = \"5\" \n                            defaultValue = {100} onInput = \n                            {() => this.resetArray(document.getElementById(\"arrayLengthSlider\").value)}></input>\n                    </div>\n                </div>\n                <div className = 'bottom-rectangle'></div>\n            </div>\n            );\n    }\n}"]},"metadata":{},"sourceType":"module"}