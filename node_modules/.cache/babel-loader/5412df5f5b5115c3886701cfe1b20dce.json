{"ast":null,"code":"import _regeneratorRuntime from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/acastles/Documents/Projects/sorting_visualizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/**\n * Highlights and changes height of bar corresponding to array element being changed.\n * @param {int} index - index in array of element being changed\n * @param {int} value - new value of array element\n * @param {int} speed - speed (delay) of operation in ms\n */export function highlightBar(index,value,speed){return new Promise(function(resolve){setTimeout(function(){var arrayBars=document.getElementsByClassName('array-element');var barStyle=arrayBars[index].style;barStyle.backgroundColor='red';barStyle.height=\"\".concat(value,\"%\");resolve();},speed);});}/**\n * Resets bar color to black.\n * @param {int} index - index in array of element being changed\n * @param {int} speed - speed (delay) of operation in ms\n */export function resetBarColor(index,speed){return new Promise(function(resolve){setTimeout(function(){var arrayBars=document.getElementsByClassName('array-element');var barStyle=arrayBars[index].style;barStyle.backgroundColor='black';resolve();},speed);});}/**\n * Changes class of HTML elements to sorted type which starts 2 sec color change animation.\n */export function animationScaledTimeout(){return new Promise(function(resolve){var elements=document.getElementsByClassName(\"array-element\");for(var i=elements.length-1;i>=0;--i){elements[i].className=\"array-element array-element-sorted\";}setTimeout(function(){resolve();},2000);});}/**\n * Highlights and resets two elements that are being swapped during sorting.\n * @param {array} array - current array during sorting\n * @param {int} i - first index being swapped\n * @param {int} j - second index being swapped\n * @param {int} sortingSpeed - speed (delay) of operation in ms\n */export function highlightSwappedElements(array,i,j,sortingSpeed){return new Promise(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve){var temp;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:temp=array[i];_context.next=3;return highlightBar(i,array[j],sortingSpeed);case 3:_context.next=5;return resetBarColor(i,sortingSpeed);case 5:_context.next=7;return highlightBar(j,temp,sortingSpeed);case 7:_context.next=9;return resetBarColor(j,sortingSpeed);case 9:resolve();case 10:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());}/**\n * Swaps two elements in array\n * @param {array} array - current element being sorted\n * @param {int} i  - first element being swapped\n * @param {int} j - second element being swapped\n */export function swap(array,i,j){var temp=array[i];array[i]=array[j];array[j]=temp;}/**\n  * Resets existing elements to original class name.\n  * render does not change class of visible elements back to array-element.\n  */export function resetExistingElements(){var elements=document.getElementsByClassName(\"array-element array-element-sorted\");for(var i=elements.length-1;i>=0;--i){elements[i].className=\"array-element\";}}/**\n * Changes buttons to active with 'Y' or inactive with 'N'.\n * @param {str} yesOrNo \n */export function areButtonsActive(yesOrNo){var bool_=false;if(yesOrNo==='N'){bool_=true;document.getElementById(\"sliderLabel\").style.color=\"grey\";}else{document.getElementById(\"sliderLabel\").style.color=\"black\";}var buttons=document.getElementsByTagName(\"button\");for(var i=0;i<=buttons.length-1;++i){buttons[i].disabled=bool_;buttons[i].style.backgroundColor='rgb(0, 255, 157)';}document.getElementById(\"arrayLengthSlider\").disabled=bool_;}/**\n * Calculates sorting speed (delay) by dividing current array length from slider.\n * Speed inversely proportional to length in ms.\n */export function getSortingSpeed(){return 100/document.getElementById(\"arrayLengthSlider\").value;}","map":{"version":3,"sources":["/Users/acastles/Documents/Projects/sorting_visualizer/src/SortingAlgorithms/utilities.jsx"],"names":["highlightBar","index","value","speed","Promise","resolve","setTimeout","arrayBars","document","getElementsByClassName","barStyle","style","backgroundColor","height","resetBarColor","animationScaledTimeout","elements","i","length","className","highlightSwappedElements","array","j","sortingSpeed","temp","swap","resetExistingElements","areButtonsActive","yesOrNo","bool_","getElementById","color","buttons","getElementsByTagName","disabled","getSortingSpeed"],"mappings":"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","sourcesContent":["/**\n * Highlights and changes height of bar corresponding to array element being changed.\n * @param {int} index - index in array of element being changed\n * @param {int} value - new value of array element\n * @param {int} speed - speed (delay) of operation in ms\n */\nexport function highlightBar(index, value, speed){\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-element');\n        const barStyle = arrayBars[index].style\n        barStyle.backgroundColor = 'red';\n        barStyle.height = `${value}%`;\n        resolve()\n      }, speed)\n    })\n}\n\n/**\n * Resets bar color to black.\n * @param {int} index - index in array of element being changed\n * @param {int} speed - speed (delay) of operation in ms\n */\nexport function resetBarColor(index, speed){\n    return new Promise((resolve) => {\n        setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-element');\n        const barStyle = arrayBars[index].style\n        barStyle.backgroundColor = 'black';\n        resolve()\n    }, speed)\n    })\n}\n\n/**\n * Changes class of HTML elements to sorted type which starts 2 sec color change animation.\n */\nexport function animationScaledTimeout(){\n    return new Promise((resolve) => {\n        let elements = document.getElementsByClassName(\"array-element\")\n            for (var i = elements.length - 1; i >= 0; --i) {\n                elements[i].className = \"array-element array-element-sorted\"\n            }\n        setTimeout(() => {\n        resolve()\n        }, 2000)\n    })\n}\n\n\n/**\n * Highlights and resets two elements that are being swapped during sorting.\n * @param {array} array - current array during sorting\n * @param {int} i - first index being swapped\n * @param {int} j - second index being swapped\n * @param {int} sortingSpeed - speed (delay) of operation in ms\n */\nexport function highlightSwappedElements(array, i, j, sortingSpeed){\n  return new Promise(async(resolve) => {\n  const temp = array[i];\n  \n  await highlightBar(i, array[j], sortingSpeed)\n  await resetBarColor(i, sortingSpeed)\n\n  await highlightBar(j, temp, sortingSpeed)\n  await resetBarColor(j, sortingSpeed)\n\n  resolve()\n})\n}\n\n/**\n * Swaps two elements in array\n * @param {array} array - current element being sorted\n * @param {int} i  - first element being swapped\n * @param {int} j - second element being swapped\n */\nexport function swap(array, i, j){\n      const temp = array[i];\n\n      array[i] = array[j];\n      array[j] = temp\n}\n\n /**\n  * Resets existing elements to original class name.\n  * render does not change class of visible elements back to array-element.\n  */\nexport function resetExistingElements(){\n    let elements = document.getElementsByClassName(\"array-element array-element-sorted\")\n      for (var i = elements.length - 1; i >= 0; --i) {\n        elements[i].className = \"array-element\"\n      }\n}\n\n/**\n * Changes buttons to active with 'Y' or inactive with 'N'.\n * @param {str} yesOrNo \n */\nexport function areButtonsActive(yesOrNo){\n    let bool_ = false\n    if (yesOrNo === 'N'){\n        bool_ = true\n        document.getElementById(\"sliderLabel\").style.color = \"grey\"\n    }\n    else{\n      document.getElementById(\"sliderLabel\").style.color = \"black\"\n    }\n    let buttons = document.getElementsByTagName(\"button\");\n        for (var i = 0; i <= buttons.length - 1; ++i) {\n            buttons[i].disabled = bool_\n            buttons[i].style.backgroundColor = 'rgb(0, 255, 157)'\n          }\n    document.getElementById(\"arrayLengthSlider\").disabled = bool_\n}\n\n/**\n * Calculates sorting speed (delay) by dividing current array length from slider.\n * Speed inversely proportional to length in ms.\n */\nexport function getSortingSpeed(){\n    return 100/document.getElementById(\"arrayLengthSlider\").value\n}"]},"metadata":{},"sourceType":"module"}