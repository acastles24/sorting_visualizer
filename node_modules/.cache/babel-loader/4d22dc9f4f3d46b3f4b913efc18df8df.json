{"ast":null,"code":"var _jsxFileName = \"/Users/acastles/Documents/Projects/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport MetaTags from 'react-meta-tags';\nimport './SortingVisualizer.css';\nimport { mergeSort } from '../SortingAlgorithms/mergeSort';\nimport { quickSort } from '../SortingAlgorithms/quickSort';\nimport { bubbleSort } from '../SortingAlgorithms/bubbleSort';\nimport { insertionSort } from '../SortingAlgorithms/insertionSort';\nimport { resetExistingElements, areButtonsActive, getSortingSpeed } from '../SortingAlgorithms/utilities';\nimport { getRandomInt } from '../SortingVisualizer/utilities';\nconst BUTTON_SELECT_COLOR = 'rgb(15, 175, 224)';\nexport default class SortingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(100);\n  }\n\n  insertionSortButton(array) {\n    this.sort(insertionSort, array);\n  }\n\n  bubbleSortButton(array) {\n    this.sort(bubbleSort, array);\n  }\n\n  quickSortButton(array) {\n    this.sort(quickSort, array);\n  }\n\n  mergeSortButton(array) {\n    this.sort(mergeSort, array);\n  }\n  /**\n   * Sorts array using chosen method. Creates copy of array to avoid re-rendering.\n   * @param {class} method - class of clicked sorting method\n   * @param {*} array - current array to be sorted\n   */\n\n\n  async sort(sortingMethod, array) {\n    resetExistingElements();\n    areButtonsActive('N');\n    let arrayCopy = array.slice();\n    const sortingSpeed = getSortingSpeed();\n    let sortMethodInit = new sortingMethod(sortingSpeed);\n    await sortMethodInit.sortStart(arrayCopy);\n    this.setState({\n      array: arrayCopy\n    });\n    areButtonsActive('Y');\n  }\n  /**\n   * Creates random array of given length and sets state.\n   * @param {int} len_ - length of random array\n   */\n\n\n  resetArray(len_) {\n    resetExistingElements();\n    const array = [];\n\n    for (let i = 0; i < len_; i++) {\n      array.push(getRandomInt(5, 100));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    const width = (90 - 0.2 - array.length * 0.2) / array.length;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(MetaTags, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1.0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"arrayContainer\",\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"array-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, array.map((value, idX) => React.createElement(\"div\", {\n      className: \"array-element\",\n      key: idX,\n      style: {\n        width: `${width}%`,\n        height: `${value}%`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"button-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"mergeSortButton\",\n      className: \"sorting-button\",\n      onClick: () => {\n        this.mergeSortButton(this.state.array);\n        document.getElementById('mergeSortButton').style.backgroundColor = BUTTON_SELECT_COLOR;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Merge Sort\")), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"quickSortButton\",\n      className: \"sorting-button\",\n      onClick: () => {\n        this.quickSortButton(this.state.array);\n        document.getElementById('quickSortButton').style.backgroundColor = BUTTON_SELECT_COLOR;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Quick Sort\")), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"bubbleSortButton\",\n      className: \"sorting-button\",\n      onClick: () => {\n        this.bubbleSortButton(this.state.array);\n        document.getElementById('bubbleSortButton').style.backgroundColor = BUTTON_SELECT_COLOR;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Bubble Sort\")), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"insertionSortButton\",\n      className: \"sorting-button\",\n      onClick: () => {\n        this.insertionSortButton(this.state.array);\n        document.getElementById('insertionSortButton').style.backgroundColor = BUTTON_SELECT_COLOR;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Insertion Sort\")), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"randomButton\",\n      className: \"sorting-button\",\n      onClick: () => this.resetArray(this.state.array.length),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Generate Random Array\")), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"sliderLabel\",\n      className: \"slider-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Array Size\"), React.createElement(\"input\", {\n      className: \"slider\",\n      type: \"range\",\n      name: \"length\",\n      id: \"arrayLengthSlider\",\n      min: \"10\",\n      max: \"200\",\n      step: \"5\",\n      defaultValue: 100,\n      onInput: () => this.resetArray(document.getElementById(\"arrayLengthSlider\").value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"bottom-rectangle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/acastles/Documents/Projects/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","Component","MetaTags","mergeSort","quickSort","bubbleSort","insertionSort","resetExistingElements","areButtonsActive","getSortingSpeed","getRandomInt","BUTTON_SELECT_COLOR","SortingVisualizer","constructor","state","array","componentDidMount","resetArray","insertionSortButton","sort","bubbleSortButton","quickSortButton","mergeSortButton","sortingMethod","arrayCopy","slice","sortingSpeed","sortMethodInit","sortStart","setState","len_","i","push","render","width","length","map","value","idX","height","document","getElementById","style","backgroundColor"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport MetaTags from 'react-meta-tags'\nimport './SortingVisualizer.css'\nimport {mergeSort} from '../SortingAlgorithms/mergeSort'\nimport {quickSort} from '../SortingAlgorithms/quickSort'\nimport {bubbleSort} from '../SortingAlgorithms/bubbleSort'\nimport {insertionSort} from '../SortingAlgorithms/insertionSort'\nimport {resetExistingElements, areButtonsActive, getSortingSpeed} from '../SortingAlgorithms/utilities'\nimport {getRandomInt} from '../SortingVisualizer/utilities'\n\nconst BUTTON_SELECT_COLOR = 'rgb(15, 175, 224)'\n\nexport default class SortingVisualizer extends Component{\n    constructor(){\n        super();\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray(100)\n    }\n\n    insertionSortButton(array){\n        this.sort(insertionSort, array)\n    }\n\n    bubbleSortButton(array){\n        this.sort(bubbleSort, array)\n    }\n\n    quickSortButton(array){\n        this.sort(quickSort, array)\n    }\n\n    mergeSortButton(array){\n        this.sort(mergeSort, array)\n    }\n    \n    /**\n     * Sorts array using chosen method. Creates copy of array to avoid re-rendering.\n     * @param {class} method - class of clicked sorting method\n     * @param {*} array - current array to be sorted\n     */\n    async sort(sortingMethod, array){\n        resetExistingElements()\n        areButtonsActive('N')\n    \n        let arrayCopy = array.slice()\n        const sortingSpeed = getSortingSpeed()\n        \n        let sortMethodInit = new sortingMethod(sortingSpeed)\n        await sortMethodInit.sortStart(arrayCopy)\n        this.setState({array: arrayCopy})\n        areButtonsActive('Y')\n    }\n\n    /**\n     * Creates random array of given length and sets state.\n     * @param {int} len_ - length of random array\n     */\n    resetArray(len_){\n        resetExistingElements()\n        const array = []\n        for (let i = 0; i < len_; i ++){\n            array.push(getRandomInt(5, 100))\n        }\n        this.setState({array})\n    }\n    render(){\n        const {array} = this.state;\n        const width = ((90 - 0.2 - (array.length*0.2))/(array.length));\n        return(\n            <div>\n                <MetaTags>\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>\n                </MetaTags>\n                <div id = 'arrayContainer' className = 'array-container'>\n                    <div className = 'array-wrapper'>\n                        {array.map((value, idX) => (\n                        <div className = 'array-element'  key = {idX} style = {{width: `${width}%`, height: `${value}%`}}></div>\n                        ))}\n                    </div>\n                </div>\n                <div className = 'button-bar'>\n                    <div className = 'button-container'>\n                        <button id='mergeSortButton' className = 'sorting-button' onClick={() => {this.mergeSortButton(this.state.array); document.getElementById('mergeSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Merge Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='quickSortButton' className = 'sorting-button' onClick={() => {this.quickSortButton(this.state.array); document.getElementById('quickSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Quick Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='bubbleSortButton' className = 'sorting-button' onClick={() => {this.bubbleSortButton(this.state.array); document.getElementById('bubbleSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Bubble Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='insertionSortButton' className = 'sorting-button' onClick={() => {this.insertionSortButton(this.state.array); document.getElementById('insertionSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Insertion Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='randomButton' className = 'sorting-button' onClick={() => this.resetArray(this.state.array.length)}>Generate Random Array</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <div id = 'sliderLabel' className = 'slider-label'>Array Size</div>\n                        <input className = 'slider' type = \"range\" name = \"length\" id = \"arrayLengthSlider\" min = \"10\" max = \"200\" step = \"5\" \n                            defaultValue = {100} onInput = \n                            {() => this.resetArray(document.getElementById(\"arrayLengthSlider\").value)}></input>\n                    </div>\n                </div>\n                <div className = 'bottom-rectangle'></div>\n            </div>\n            );\n    }\n}"]},"metadata":{},"sourceType":"module"}