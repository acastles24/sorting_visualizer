{"version":3,"sources":["SortingAlgorithms/utilities.jsx","SortingAlgorithms/mergeSort.jsx","SortingAlgorithms/quickSort.jsx","SortingAlgorithms/bubbleSort.jsx","SortingAlgorithms/insertionSort.jsx","SortingVisualizer/SortingVisualizer.jsx","SortingVisualizer/utilities.jsx","App.js","serviceWorker.js","index.js"],"names":["highlightBar","index","value","speed","Promise","resolve","setTimeout","barStyle","document","getElementsByClassName","style","backgroundColor","height","resetBarColor","animationScaledTimeout","elements","i","length","className","highlightSwappedElements","array","j","sortingSpeed","a","async","temp","swap","resetExistingElements","areButtonsActive","yesOrNo","bool_","getElementById","color","buttons","getElementsByTagName","disabled","mergeSort","this","step","left","merge","right","end","Math","min","leftMoving","rightMoving","quickSort","stack","start","push","currIdx","pop","partition","pivot","pIdx","bubbleSort","swapped","insertionSort","SortingVisualizer","state","resetArray","sort","sortingMethod","arrayCopy","slice","sortMethodInit","sortStart","setState","len_","max","ceil","floor","random","width","name","content","id","map","idX","key","onClick","mergeSortButton","quickSortButton","bubbleSortButton","insertionSortButton","type","defaultValue","onInput","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43cf5d93.chunk.js","sourcesContent":["/**\n * Highlights and changes height of bar corresponding to array element being changed.\n * @param {int} index - index in array of element being changed\n * @param {int} value - new value of array element\n * @param {int} speed - speed (delay) of operation in ms\n */\nexport function highlightBar(index, value, speed){\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-element');\n        const barStyle = arrayBars[index].style\n        barStyle.backgroundColor = 'red';\n        barStyle.height = `${value}%`;\n        resolve()\n      }, speed)\n    })\n}\n\n/**\n * Resets bar color to black.\n * @param {int} index - index in array of element being changed\n * @param {int} speed - speed (delay) of operation in ms\n */\nexport function resetBarColor(index, speed){\n    return new Promise((resolve) => {\n        setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-element');\n        const barStyle = arrayBars[index].style\n        barStyle.backgroundColor = 'black';\n        resolve()\n    }, speed)\n    })\n}\n\n/**\n * Changes class of HTML elements to sorted type which starts 2 sec color change animation.\n */\nexport function animationScaledTimeout(){\n    return new Promise((resolve) => {\n        let elements = document.getElementsByClassName(\"array-element\")\n            for (var i = elements.length - 1; i >= 0; --i) {\n                elements[i].className = \"array-element array-element-sorted\"\n            }\n        setTimeout(() => {\n        resolve()\n        }, 2000)\n    })\n}\n\n\n/**\n * Highlights and resets two elements that are being swapped during sorting.\n * @param {array} array - current array during sorting\n * @param {int} i - first index being swapped\n * @param {int} j - second index being swapped\n * @param {int} sortingSpeed - speed (delay) of operation in ms\n */\nexport function highlightSwappedElements(array, i, j, sortingSpeed){\n  return new Promise(async(resolve) => {\n  const temp = array[i];\n  \n  await highlightBar(i, array[j], sortingSpeed)\n  await resetBarColor(i, sortingSpeed)\n\n  await highlightBar(j, temp, sortingSpeed)\n  await resetBarColor(j, sortingSpeed)\n\n  resolve()\n})\n}\n\n/**\n * Swaps two elements in array\n * @param {array} array - current element being sorted\n * @param {int} i  - first element being swapped\n * @param {int} j - second element being swapped\n */\nexport function swap(array, i, j){\n      const temp = array[i];\n\n      array[i] = array[j];\n      array[j] = temp\n}\n\n /**\n  * Resets existing elements to original class name.\n  * render does not change class of visible elements back to array-element.\n  */\nexport function resetExistingElements(){\n    let elements = document.getElementsByClassName(\"array-element array-element-sorted\")\n      for (var i = elements.length - 1; i >= 0; --i) {\n        elements[i].className = \"array-element\"\n      }\n}\n\n/**\n * Changes buttons to active with 'Y' or inactive with 'N'.\n * @param {str} yesOrNo \n */\nexport function areButtonsActive(yesOrNo){\n    let bool_ = false\n    if (yesOrNo === 'N'){\n        bool_ = true\n        document.getElementById(\"sliderLabel\").style.color = \"grey\"\n    }\n    else{\n      document.getElementById(\"sliderLabel\").style.color = \"black\"\n    }\n    let buttons = document.getElementsByTagName(\"button\");\n        for (var i = 0; i <= buttons.length - 1; ++i) {\n            buttons[i].disabled = bool_\n            buttons[i].style.backgroundColor = 'rgb(0, 255, 157)'\n          }\n    document.getElementById(\"arrayLengthSlider\").disabled = bool_\n}\n\n/**\n * Calculates sorting speed (delay) by dividing current array length from slider.\n * Speed inversely proportional to length in ms.\n */\nexport function getSortingSpeed(){\n    return 100/document.getElementById(\"arrayLengthSlider\").value\n}","import {highlightBar, resetBarColor, animationScaledTimeout} from './utilities'\n\n/**\n * Merge sort class.\n */\nexport class mergeSort{\n  /**\n   * \n   * @param {int} sortingSpeed - sorting speed (delay) in ms.\n   */\n  constructor(sortingSpeed){\n    this.sortingSpeed = sortingSpeed\n  }\n\n  /**\n   * Main method for sort class.\n   * @param {array} array - array to sort\n   */\n  sortStart(array){  \n    return new Promise(async (resolve) => {\n    let step = 1;\n    while (step < array.length) {\n      let left = 0;\n      while (left + step < array.length) {\n        await this.merge(array, left, step);\n        left += step * 2;\n      }\n      step *= 2;\n  }\n  await animationScaledTimeout()\n  resolve()\n  })\n}\n\n/**\n * Merges (sorts) portion of array using left bound and step amount for right bound.\n * @param {*} array \n * @param {*} left \n * @param {*} step \n */\nmerge(array, left, step) {\n  return new Promise(async (resolve) => {\n    let right = left + step;\n    let end = Math.min(left + step * 2 - 1, array.length - 1);\n    let leftMoving = left;\n    let rightMoving = right;\n    let temp = [];\n\n    for (let i = left; i <= end; i++) {\n      if ((array[leftMoving] <= array[rightMoving] || rightMoving > end) &&\n          leftMoving < right) {\n        temp[i] = array[leftMoving];\n        leftMoving++;\n      } else {\n        temp[i] = array[rightMoving];\n        rightMoving++;\n      }\n    }\n    for (let j = left; j <= end; j++) {\n      array[j] = temp[j];\n      await highlightBar(j, temp[j], this.sortingSpeed)\n      await resetBarColor(j, this.sortingSpeed)\n    }\n    resolve()\n  })\n}\n}","import {animationScaledTimeout, highlightSwappedElements, swap} from './utilities'\n\n\n/**\n * Quick sort class.\n */\nexport class quickSort{\n    /**\n     * \n     * @param {int} sortingSpeed - sorting speed (delay) in ms\n     */\n  constructor(sortingSpeed){\n    this.sortingSpeed = sortingSpeed\n  }\n\n  /**\n   * Main method for sort class.\n   * @param {array} array - array to sort\n   */\n  sortStart(array){\n      return new Promise(async (resolve) => {\n      let stack = [];\n      let start = 0;\n      let end = array.length - 1;\n\n      stack.push([start, end]);\n\n      while (stack.length !== 0){\n          let currIdx = stack.pop()\n          start = currIdx[0];\n          end = currIdx[1];\n\n          let pivot = await this.partition(array, start, end);\n\n          if (pivot - 1 > start){\n              stack.push([start, pivot - 1]);\n          }\n\n          if (pivot + 1 < end){\n              stack.push([pivot + 1, end]);\n          }\n      }\n\n      await animationScaledTimeout()\n\n      resolve();\n      })\n  }\n\n  /**\n   * Partitions array using pivot method. Returns pivot index\n   * @param {array} array - current array being sorted\n   * @param {int} start - index of start of partitioned array\n   * @param {int} end - end of partition array (used as initial pivot)\n   */\n  partition(array, start, end){\n      return new Promise(async (resolve) => {\n        const pivot = array[end];\n        let pIdx = start;\n        for (let i = start; i < end; i++){\n            if (array[i] <= pivot){\n                await highlightSwappedElements(array, i, pIdx, this.sortingSpeed)\n                swap(array, i, pIdx);\n                pIdx++;\n            }\n        }\n        await highlightSwappedElements(array, pIdx, end, this.sortingSpeed)\n        swap(array, pIdx, end);\n        resolve(pIdx);\n      })\n  }\n}","import {swap, animationScaledTimeout, highlightSwappedElements} from './utilities'\n\n/**\n * Bubble sort class.\n */\nexport class bubbleSort{\n    /**\n     * \n     * @param {int} sortingSpeed - sorting speed (delay) in ms.\n     */\n    constructor(sortingSpeed){\n      this.sortingSpeed = sortingSpeed\n    }\n\n    /**\n     * Main method for sort class.\n     * @param {array} array - array to sort\n     */\n    sortStart(array){\n        return new Promise(async (resolve) => {\n            let swapped = true;\n            while (swapped){\n                swapped = false;\n                for(let i = 0; i < array.length; i++){\n                    if(array[i] && array[i + 1] && array[i] > array[i + 1]) {\n                        await highlightSwappedElements(array, i, i+1, this.sortingSpeed)\n                        swap(array, i, i + 1);\n                        swapped = true\n                    }\n                }\n            }\n            await animationScaledTimeout()\n            resolve()\n        })\n    }\n}","import {animationScaledTimeout, highlightBar, resetBarColor} from './utilities'\n\n/**\n * Insertion sort class.\n */\nexport class insertionSort{\n    /**\n     * \n     * @param {int} sortingSpeed - sorting speed (delay) in ms.\n     */\n    constructor(sortingSpeed){\n      this.sortingSpeed = sortingSpeed\n    }\n\n   /**\n   * Main method for sort class.\n   * @param {array} array - array to sort\n   */\n    sortStart(array){\n        return new Promise(async (resolve) => {\n            for (let i = 0; i < array.length; i++){\n                let temp = array[i];\n                let j = i - 1;\n                while (j >= 0 && array[j] > temp){\n                    await highlightBar(j+1, array[j], this.sortingSpeed)\n                    await resetBarColor(j+1, this.sortingSpeed)\n                    array[j + 1] = array[j];\n                    j--;\n                }\n                await highlightBar(j+1, temp, this.sortingSpeed)\n                await resetBarColor(j+1, this.sortingSpeed)\n                array[j + 1] = temp;\n            }\n            await animationScaledTimeout()\n            resolve()\n        })\n    }\n}","import React, {Component} from 'react'\nimport MetaTags from 'react-meta-tags'\nimport './SortingVisualizer.css'\nimport {mergeSort} from '../SortingAlgorithms/mergeSort'\nimport {quickSort} from '../SortingAlgorithms/quickSort'\nimport {bubbleSort} from '../SortingAlgorithms/bubbleSort'\nimport {insertionSort} from '../SortingAlgorithms/insertionSort'\nimport {resetExistingElements, areButtonsActive, getSortingSpeed} from '../SortingAlgorithms/utilities'\nimport {getRandomInt} from '../SortingVisualizer/utilities'\n\nconst BUTTON_SELECT_COLOR = 'rgb(15, 175, 224)'\n\nexport default class SortingVisualizer extends Component{\n    constructor(){\n        super();\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray(100)\n    }\n\n    insertionSortButton(array){\n        this.sort(insertionSort, array)\n    }\n\n    bubbleSortButton(array){\n        this.sort(bubbleSort, array)\n    }\n\n    quickSortButton(array){\n        this.sort(quickSort, array)\n    }\n\n    mergeSortButton(array){\n        this.sort(mergeSort, array)\n    }\n    \n    /**\n     * Sorts array using chosen method. Creates copy of array to avoid re-rendering.\n     * @param {class} method - class of clicked sorting method\n     * @param {*} array - current array to be sorted\n     */\n    async sort(sortingMethod, array){\n        resetExistingElements()\n        areButtonsActive('N')\n    \n        let arrayCopy = array.slice()\n        const sortingSpeed = getSortingSpeed()\n        \n        let sortMethodInit = new sortingMethod(sortingSpeed)\n        await sortMethodInit.sortStart(arrayCopy)\n        this.setState({array: arrayCopy})\n        areButtonsActive('Y')\n    }\n\n    /**\n     * Creates random array of given length and sets state.\n     * @param {int} len_ - length of random array\n     */\n    resetArray(len_){\n        resetExistingElements()\n        const array = []\n        for (let i = 0; i < len_; i ++){\n            array.push(getRandomInt(5, 100))\n        }\n        this.setState({array})\n    }\n    render(){\n        const {array} = this.state;\n        const width = ((90 - 0.2 - (array.length*0.2))/(array.length));\n        return(\n            <div>\n                <MetaTags>\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>\n                </MetaTags>\n                <div id = 'arrayContainer' className = 'array-container'>\n                    <div className = 'array-wrapper'>\n                        {array.map((value, idX) => (\n                        <div className = 'array-element'  key = {idX} style = {{backgroundColor: 'black', width: `${width}%`, height: `${value}%`}}></div>\n                        ))}\n                    </div>\n                </div>\n                <div className = 'button-bar'>\n                    <div className = 'button-container'>\n                        <button id='mergeSortButton' className = 'sorting-button' onClick={() => {this.mergeSortButton(this.state.array); document.getElementById('mergeSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Merge Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='quickSortButton' className = 'sorting-button' onClick={() => {this.quickSortButton(this.state.array); document.getElementById('quickSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Quick Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='bubbleSortButton' className = 'sorting-button' onClick={() => {this.bubbleSortButton(this.state.array); document.getElementById('bubbleSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Bubble Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='insertionSortButton' className = 'sorting-button' onClick={() => {this.insertionSortButton(this.state.array); document.getElementById('insertionSortButton').style.backgroundColor = BUTTON_SELECT_COLOR}}>Insertion Sort</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <button id='randomButton' className = 'sorting-button' onClick={() => this.resetArray(this.state.array.length)}>Generate Random Array</button>\n                    </div>\n                    <div className = 'button-container'>\n                        <div id = 'sliderLabel' className = 'slider-label'>Array Size</div>\n                        <input className = 'slider' type = \"range\" name = \"length\" id = \"arrayLengthSlider\" min = \"10\" max = \"200\" step = \"5\" \n                            defaultValue = {100} onInput = \n                            {() => this.resetArray(document.getElementById(\"arrayLengthSlider\").value)}></input>\n                    </div>\n                </div>\n                <div className = 'bottom-rectangle'></div>\n            </div>\n            );\n    }\n}","// https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n\n/**\n * Creates random integer within range\n * @param {int} min - mininum range of random number\n * @param {int} max - maximum range of random number\n */\nexport function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}